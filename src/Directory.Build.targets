<Project>
  <Target Name="ComputeNpmPackageMetadata">
    <ItemGroup>
      <NpmPackageFile>
        <StampFile>$([System.IO.Path]::Combine('%(RootDir)%(Directory)', 'node_modules', '.install-stamp'))</StampFile>
        <WorkingDirectory>%(RootDir)%(Directory)</WorkingDirectory>
        <Command Condition="$(RestorePackagesWithLockFile) != 'true'">npm install</Command>
        <Command Condition="$(RestorePackagesWithLockFile) == 'true'">npm ci</Command>
      </NpmPackageFile>
    </ItemGroup>
  </Target>
  <Target Name="NpmInstall" BeforeTargets="BeforeBuild" DependsOnTargets="ComputeNpmPackageMetadata" Inputs="@(NpmPackageFile)" Outputs="%(NpmPackageFile.StampFile)">
    <Touch Files="@(NpmPackageFile->'%(StampFile)')" AlwaysCreate="true" />
    <Exec Command="@(NpmPackageFile->'%(Command)')" WorkingDirectory="%(WorkingDirectory)" ContinueOnError="true" />
  </Target>
  <Target Name="TransformInitTools" BeforeTargets="BeforeBuild" Condition="!Exists('$(DotnetToolManifestFile)')">
    <Exec Command="dotnet new tool-manifest" ContinueOnError="true" WorkingDirectory="$(MSBuildThisFileDirectory)" />
    <Exec Command="dotnet tool install sergen" ContinueOnError="true" WorkingDirectory="$(MSBuildThisFileDirectory)" />
  </Target>
  <Target Name="TransformToolRestore" AfterTargets="BeforeBuild" Inputs="$(DotnetToolManifestFile)" Outputs="$(DotnetToolRestoreStamp)"
          Condition="'$(DotNetSergen)' == 'dotnet sergen' And ('$(SergenTransform)' != '' OR Exists('tsconfig.json'))">
    <Exec Command="dotnet tool restore" ContinueOnError="true" />
	<Touch Files="$(DotnetToolRestoreStamp)" AlwaysCreate="true" />
  </Target>
  <Target Name="TransformSergenRestore" BeforeTargets="BeforeBuild"
          Condition="Exists('tsconfig.json')">
    <Exec Command="$(DotNetSergen) restore" ContinueOnError="true" />
  </Target>
  <Target Name="TransformMvc" BeforeTargets="BeforeBuild"
          Condition="'$(SergenTransform)' == 'mvc'">
    <Exec Command="$(DotNetSergen) mvc" ContinueOnError="true" />
  </Target>
  <Target Name="TransformMvct" BeforeTargets="BeforeBuild"
          Condition="'$(SergenTransform)' == 'mvct' OR '$(SergenTransform)' == 'all'">
    <Exec Command="$(DotNetSergen) mvct" ContinueOnError="true" />
  </Target>
  <Target Name="TransformServerTypings" AfterTargets="AfterBuild" 
          Condition="'$(SergenTransform)' == 'servertypings' OR '$(SergenTransform)' == 'all'">
    <Exec Command="$(DotNetSergen) servertypings" ContinueOnError="true" />
  </Target>
  <Target Name="CalculateProjectTSConfigInputs" AfterTargets="AfterBuild">
    <ItemGroup>
      <ProjectTSConfigInputs Include="@(TypeScriptCompile)"
          Condition="'%(TypeScriptCompile.Identity)' != 'wwwroot\index.d.ts'" />
      <ProjectTSConfigInputs Include="tsconfig.json" Condition="Exists('tsconfig.json')" />
      <ProjectTSConfigInputs Include="..\tsconfig.base.json" Condition="Exists('tsconfig.json')" />
    </ItemGroup>
  </Target>
  <Target Name="CompileProjectTSConfig" DependsOnTargets="NpmInstall" AfterTargets="CalculateProjectTSConfigInputs" Condition="Exists('tsconfig.json')"
    Inputs="@(ProjectTSConfigInputs)" Outputs="wwwroot\index.js;wwwroot\index.d.ts">
    <Message Text="Executing TypeScript compiler..." Importance="high"></Message>
    <Exec Command="node &quot;$(TSJavaScriptFile.Replace('build\\..\tools\', 'tools\'))&quot; -p ./tsconfig.json" ContinueOnError="true" />
  </Target>
  <Target Name="IncludeTypingsToPackage" AfterTargets="_RemoveWebRootContentFromPackaging">
    <ItemGroup>
      <None Include="@(TypingsToPackage)" Pack="true" PackagePath="%(TypingsToPackage.PackagePath)" />
    </ItemGroup>
  </Target>
</Project>