<Project>
  <Import Project="$(SerenitySrc)RestoreNpmPackages.targets" />
  <Target Name="TransformInitTools" BeforeTargets="BeforeBuild" Condition="!Exists('$(DotnetToolManifestFile)')">
    <Exec Command="dotnet new tool-manifest" ContinueOnError="true" WorkingDirectory="$(MSBuildThisFileDirectory)" />
    <Exec Command="dotnet tool install sergen" ContinueOnError="true" WorkingDirectory="$(MSBuildThisFileDirectory)" />
  </Target>
  <Target Name="TransformToolRestore" AfterTargets="BeforeBuild" Inputs="$(DotnetToolManifestFile)" Outputs="$(DotnetToolRestoreStamp)"
          Condition="'$(DotNetSergen)' == 'dotnet sergen' And ('$(SergenTransform)' != '' OR Exists('tsconfig.json'))">
    <Exec Command="dotnet tool restore" ContinueOnError="true" />
    <Touch Files="$(DotnetToolRestoreStamp)" AlwaysCreate="true" />
  </Target>
  <Target Name="RestoreStaticWebAssetTypings" AfterTargets="ResolveProjectStaticWebAssets" DependsOnTargets="ResolveReferencedProjectsStaticWebAssets" Condition="Exists('tsconfig.json')">
    <ItemGroup>
      <_StaticWebAssetTyping Include="%(StaticWebAsset.RootDir)%(Directory)%(Filename).d.ts" Condition="'%(StaticWebAsset.SourceType)' == 'Project' And '%(Extension)' == '.js' And Exists('%(RootDir)%(Directory)%(Filename).d.ts') And $([System.String]::Copy('%(Directory)').Replace('\','/').EndsWith('wwwroot/'))">
        <TargetFolder Condition="'%(StaticWebAsset.Filename)' != 'Serenity.CoreLib'">%(StaticWebAsset.SourceId)</TargetFolder>
        <TargetFolder Condition="'%(StaticWebAsset.Filename)' == 'Serenity.CoreLib'">serenity.corelib</TargetFolder>
      </_StaticWebAssetTyping>
      <_StaticWebAssetTyping Include="%(StaticWebAsset.RootDir)%(Directory)..\typings\**\index.d.ts" Condition="'%(StaticWebAsset.SourceType)' == 'Project' And '%(Extension)' == '.js' And $([System.String]::Copy('%(Directory)').Replace('\','/').EndsWith('staticwebassets/'))">
        <TargetFolder Condition="'%(StaticWebAsset.Filename)' != 'Serenity.CoreLib'">%(StaticWebAsset.SourceId)</TargetFolder>
        <TargetFolder Condition="'%(StaticWebAsset.Filename)' == 'Serenity.CoreLib'">serenity.corelib</TargetFolder>
      </_StaticWebAssetTyping>
    </ItemGroup>
    <Copy SourceFiles="@(_StaticWebAssetTyping)" DestinationFiles="@(_StaticWebAssetTyping->'typings\%(TargetFolder)\index.d.ts'->ToLowerInvariant())" SkipUnchangedFiles="true" />
  </Target>
  <Target Name="CalculateProjectTSConfigInputs">
    <ItemGroup>
      <ProjectTSConfigInputs Include="@(TypeScriptCompile)"
          Condition="'%(TypeScriptCompile.Identity)' != 'wwwroot\index.d.ts'" />
      <ProjectTSConfigInputs Include="tsconfig.json" Condition="Exists('tsconfig.json')" />
      <ProjectTSConfigInputs Include="..\tsconfig.base.json" Condition="Exists('tsconfig.json')" />
    </ItemGroup>
  </Target>
  <Target Name="CompileProjectTSConfig" DependsOnTargets="NpmInstall;CalculateProjectTSConfigInputs" AfterTargets="AfterBuild" Condition="Exists('tsconfig.json')"
    Inputs="@(ProjectTSConfigInputs)" Outputs="wwwroot\index.js;wwwroot\index.d.ts">
    <Message Text="Executing TypeScript compiler..." Importance="high"></Message>
    <Exec Command="node &quot;$(TSJavaScriptFile.Replace('build\\..\tools\', 'tools\'))&quot; -p ./tsconfig.json" ContinueOnError="true" />
  </Target>
  <Target Name="IncludeTypingsToPackage" BeforeTargets="_GetPackageFiles">
    <ItemGroup>
      <None Include="@(TypingsToPackage)" Pack="true" PackagePath="%(TypingsToPackage.PackagePath)" />
    </ItemGroup>
  </Target>
</Project>